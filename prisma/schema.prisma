// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String?
  email String? @unique
  emailVerified DateTime?
  image String?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  favoriteIds String[] @db.ObjectId

  accounts Account[]
  ownStudies Study[]
  myStudyRegistration StudyRegistration[] 
  feedback Feedback[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Study {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  leaderId String @db.ObjectId
  
  category String
  title String
  subtitle String
  description String
  maxPeople Int
  meetingCount Int
  meetingDay Int[]
  type String
  latePenalty Int
  absentPenalty Int
  city String
  district String
  startDate DateTime
  endDate DateTime
  imageSrc String
  

  leader User @relation(fields: [leaderId], references: [id], onDelete: Cascade)
  studyRegistrations StudyRegistration[] 
  journals Journal[]
}

model StudyRegistration {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  userId String @db.ObjectId
  studyId String @db.ObjectId
  accepted Boolean @default(false)
  penalty Int @default(0)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  study Study @relation(fields: [studyId], references: [id], onDelete: Cascade)
  attends Attend[]
}

model Attend {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  studyRegistrationId String @db.ObjectId
  date DateTime @default(now())
  state Int @default(1)

  studyRegistration StudyRegistration @relation(fields: [studyRegistrationId], references: [id], onDelete:Cascade)
}

model Journal {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  studyId String @db.ObjectId
  date DateTime
  title String
  content String
  
  study Study @relation(fields: [studyId], references: [id], onDelete: Cascade)
  feedbacks Feedback[]
}

model Feedback { 
  id String @id @default(auto()) @map("_id") @db.ObjectId
  journalId String @db.ObjectId
  userId String @db.ObjectId
  content String @default("")
  satisfaction Int @default(-1)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  journal Journal @relation(fields: [journalId], references: [id], onDelete: Cascade)
}